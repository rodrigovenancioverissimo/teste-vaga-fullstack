// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class CSV {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): CSV {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsCSV(bb: flatbuffers.ByteBuffer, obj?: CSV): CSV {
    return (obj || new CSV()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsCSV(bb: flatbuffers.ByteBuffer, obj?: CSV): CSV {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new CSV()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  nrInst(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  nrAgencia(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  cdClient(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  nmClient(): string | null;
  nmClient(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  nmClient(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  nrCpfCnpj(): string | null;
  nrCpfCnpj(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  nrCpfCnpj(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  nrContrato(): number {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  dtContrato(): string | null;
  dtContrato(
    optionalEncoding: flatbuffers.Encoding,
  ): string | Uint8Array | null;
  dtContrato(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  qtPrestacoes(): number {
    const offset = this.bb!.__offset(this.bb_pos, 18);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  vlTotal(): string | null;
  vlTotal(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  vlTotal(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 20);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  cdProduto(): number {
    const offset = this.bb!.__offset(this.bb_pos, 22);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  dsProduto(): string | null;
  dsProduto(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  dsProduto(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 24);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  cdCarteira(): number {
    const offset = this.bb!.__offset(this.bb_pos, 26);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  dsCarteira(): string | null;
  dsCarteira(
    optionalEncoding: flatbuffers.Encoding,
  ): string | Uint8Array | null;
  dsCarteira(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 28);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  nrProposta(): number {
    const offset = this.bb!.__offset(this.bb_pos, 30);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  nrPresta(): number {
    const offset = this.bb!.__offset(this.bb_pos, 32);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  tpPresta(): string | null;
  tpPresta(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  tpPresta(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 34);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  nrSeqPre(): number {
    const offset = this.bb!.__offset(this.bb_pos, 36);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  dtVctPre(): string | null;
  dtVctPre(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  dtVctPre(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 38);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  vlPresta(): string | null;
  vlPresta(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  vlPresta(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 40);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  vlMora(): string | null;
  vlMora(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  vlMora(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 42);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  vlMulta(): string | null;
  vlMulta(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  vlMulta(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 44);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  vlOutAcr(): string | null;
  vlOutAcr(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  vlOutAcr(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 46);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  vlIof(): string | null;
  vlIof(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  vlIof(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 48);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  vlDescon(): string | null;
  vlDescon(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  vlDescon(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 50);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  vlAtual(): string | null;
  vlAtual(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  vlAtual(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 52);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  idSituac(): string | null;
  idSituac(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  idSituac(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 54);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  idSitVen(): string | null;
  idSitVen(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  idSitVen(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 56);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startCSV(builder: flatbuffers.Builder) {
    builder.startObject(27);
  }

  static addNrInst(builder: flatbuffers.Builder, nrInst: number) {
    builder.addFieldInt32(0, nrInst, 0);
  }

  static addNrAgencia(builder: flatbuffers.Builder, nrAgencia: number) {
    builder.addFieldInt32(1, nrAgencia, 0);
  }

  static addCdClient(builder: flatbuffers.Builder, cdClient: number) {
    builder.addFieldInt32(2, cdClient, 0);
  }

  static addNmClient(
    builder: flatbuffers.Builder,
    nmClientOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(3, nmClientOffset, 0);
  }

  static addNrCpfCnpj(
    builder: flatbuffers.Builder,
    nrCpfCnpjOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(4, nrCpfCnpjOffset, 0);
  }

  static addNrContrato(builder: flatbuffers.Builder, nrContrato: number) {
    builder.addFieldInt32(5, nrContrato, 0);
  }

  static addDtContrato(
    builder: flatbuffers.Builder,
    dtContratoOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(6, dtContratoOffset, 0);
  }

  static addQtPrestacoes(builder: flatbuffers.Builder, qtPrestacoes: number) {
    builder.addFieldInt32(7, qtPrestacoes, 0);
  }

  static addVlTotal(
    builder: flatbuffers.Builder,
    vlTotalOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(8, vlTotalOffset, 0);
  }

  static addCdProduto(builder: flatbuffers.Builder, cdProduto: number) {
    builder.addFieldInt32(9, cdProduto, 0);
  }

  static addDsProduto(
    builder: flatbuffers.Builder,
    dsProdutoOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(10, dsProdutoOffset, 0);
  }

  static addCdCarteira(builder: flatbuffers.Builder, cdCarteira: number) {
    builder.addFieldInt32(11, cdCarteira, 0);
  }

  static addDsCarteira(
    builder: flatbuffers.Builder,
    dsCarteiraOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(12, dsCarteiraOffset, 0);
  }

  static addNrProposta(builder: flatbuffers.Builder, nrProposta: number) {
    builder.addFieldInt32(13, nrProposta, 0);
  }

  static addNrPresta(builder: flatbuffers.Builder, nrPresta: number) {
    builder.addFieldInt32(14, nrPresta, 0);
  }

  static addTpPresta(
    builder: flatbuffers.Builder,
    tpPrestaOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(15, tpPrestaOffset, 0);
  }

  static addNrSeqPre(builder: flatbuffers.Builder, nrSeqPre: number) {
    builder.addFieldInt32(16, nrSeqPre, 0);
  }

  static addDtVctPre(
    builder: flatbuffers.Builder,
    dtVctPreOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(17, dtVctPreOffset, 0);
  }

  static addVlPresta(
    builder: flatbuffers.Builder,
    vlPrestaOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(18, vlPrestaOffset, 0);
  }

  static addVlMora(
    builder: flatbuffers.Builder,
    vlMoraOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(19, vlMoraOffset, 0);
  }

  static addVlMulta(
    builder: flatbuffers.Builder,
    vlMultaOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(20, vlMultaOffset, 0);
  }

  static addVlOutAcr(
    builder: flatbuffers.Builder,
    vlOutAcrOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(21, vlOutAcrOffset, 0);
  }

  static addVlIof(
    builder: flatbuffers.Builder,
    vlIofOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(22, vlIofOffset, 0);
  }

  static addVlDescon(
    builder: flatbuffers.Builder,
    vlDesconOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(23, vlDesconOffset, 0);
  }

  static addVlAtual(
    builder: flatbuffers.Builder,
    vlAtualOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(24, vlAtualOffset, 0);
  }

  static addIdSituac(
    builder: flatbuffers.Builder,
    idSituacOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(25, idSituacOffset, 0);
  }

  static addIdSitVen(
    builder: flatbuffers.Builder,
    idSitVenOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(26, idSitVenOffset, 0);
  }

  static endCSV(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createCSV(
    builder: flatbuffers.Builder,
    nrInst: number,
    nrAgencia: number,
    cdClient: number,
    nmClientOffset: flatbuffers.Offset,
    nrCpfCnpjOffset: flatbuffers.Offset,
    nrContrato: number,
    dtContratoOffset: flatbuffers.Offset,
    qtPrestacoes: number,
    vlTotalOffset: flatbuffers.Offset,
    cdProduto: number,
    dsProdutoOffset: flatbuffers.Offset,
    cdCarteira: number,
    dsCarteiraOffset: flatbuffers.Offset,
    nrProposta: number,
    nrPresta: number,
    tpPrestaOffset: flatbuffers.Offset,
    nrSeqPre: number,
    dtVctPreOffset: flatbuffers.Offset,
    vlPrestaOffset: flatbuffers.Offset,
    vlMoraOffset: flatbuffers.Offset,
    vlMultaOffset: flatbuffers.Offset,
    vlOutAcrOffset: flatbuffers.Offset,
    vlIofOffset: flatbuffers.Offset,
    vlDesconOffset: flatbuffers.Offset,
    vlAtualOffset: flatbuffers.Offset,
    idSituacOffset: flatbuffers.Offset,
    idSitVenOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    CSV.startCSV(builder);
    CSV.addNrInst(builder, nrInst);
    CSV.addNrAgencia(builder, nrAgencia);
    CSV.addCdClient(builder, cdClient);
    CSV.addNmClient(builder, nmClientOffset);
    CSV.addNrCpfCnpj(builder, nrCpfCnpjOffset);
    CSV.addNrContrato(builder, nrContrato);
    CSV.addDtContrato(builder, dtContratoOffset);
    CSV.addQtPrestacoes(builder, qtPrestacoes);
    CSV.addVlTotal(builder, vlTotalOffset);
    CSV.addCdProduto(builder, cdProduto);
    CSV.addDsProduto(builder, dsProdutoOffset);
    CSV.addCdCarteira(builder, cdCarteira);
    CSV.addDsCarteira(builder, dsCarteiraOffset);
    CSV.addNrProposta(builder, nrProposta);
    CSV.addNrPresta(builder, nrPresta);
    CSV.addTpPresta(builder, tpPrestaOffset);
    CSV.addNrSeqPre(builder, nrSeqPre);
    CSV.addDtVctPre(builder, dtVctPreOffset);
    CSV.addVlPresta(builder, vlPrestaOffset);
    CSV.addVlMora(builder, vlMoraOffset);
    CSV.addVlMulta(builder, vlMultaOffset);
    CSV.addVlOutAcr(builder, vlOutAcrOffset);
    CSV.addVlIof(builder, vlIofOffset);
    CSV.addVlDescon(builder, vlDesconOffset);
    CSV.addVlAtual(builder, vlAtualOffset);
    CSV.addIdSituac(builder, idSituacOffset);
    CSV.addIdSitVen(builder, idSitVenOffset);
    return CSV.endCSV(builder);
  }
}
